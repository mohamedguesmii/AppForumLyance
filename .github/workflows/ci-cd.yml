name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

jobs:
  build-backend:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: events
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -uroot -proot"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    env:
      SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/events?createDatabaseIfNotExist=true&useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC&zeroDateTimeBehavior=CONVERT_TO_NULL
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: root
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: maven
      - name: Wait for MySQL
        run: |
          for i in {1..30}; do
            mysqladmin ping -h127.0.0.1 -uroot -proot && break
            echo "Waiting for MySQL..."
            sleep 2
          done
      - name: Build Backend with Tests
        run: mvn clean package -Dspring.profiles.active=test
        working-directory: ./EvenementCrud

  build-frontend:
    runs-on: ubuntu-latest
    needs: build-backend
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ./dashfront/package-lock.json
      - name: Install Angular CLI
        run: npm install -g @angular/cli
      - name: Install Frontend Dependencies
        run: npm ci --legacy-peer-deps
        working-directory: ./dashfront
      - name: Build Frontend
        run: ng build --configuration production
        working-directory: ./dashfront

  dockerize:
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    steps:
      - uses: actions/checkout@v3

      # Connexion Ã  Docker Hub
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          logout: true

      # Build Backend Docker Image
      - name: Build Backend Docker Image
        run: |
          docker build -f ./EvenementCrud/Dockerfile \
            -t ${{ secrets.DOCKER_USERNAME }}/backend:latest \
            ./EvenementCrud

      # Build Frontend Docker Image
      - name: Build Frontend Docker Image
        run: |
          docker build -f ./dashfront/Dockerfile \
            -t ${{ secrets.DOCKER_USERNAME }}/frontend:latest \
            ./dashfront

      # Build AI Docker Image
      - name: Build AI Docker Image
        run: |
          docker build -f ./cv-matching-serviceAI/Dockerfile \
            -t ${{ secrets.DOCKER_USERNAME }}/cv-matching-serviceai:latest \
            ./cv-matching-serviceAI

      # Build RAG Docker Image
      - name: Build RAG Docker Image
        run: |
          docker build -f ./RAG/Dockerfile \
            -t ${{ secrets.DOCKER_USERNAME }}/rag:latest \
            ./RAG

      # Build n8n Docker Image
      - name: Build n8n Docker Image
        run: |
          docker build -f ./n8n/Dockerfile \
            -t ${{ secrets.DOCKER_USERNAME }}/n8n:latest \
            ./n8n

      # Build scraping Docker Image
      - name: Build Scraping Docker Image
        run: |
          docker build -f ./scraping/Dockerfile \
            -t ${{ secrets.DOCKER_USERNAME }}/scraping:latest \
            ./scraping

      # Push de toutes les images
      - name: Push Docker Images
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/backend:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/frontend:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/cv-matching-serviceai:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/rag:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/n8n:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/scraping:latest

  deploy:
    runs-on: ubuntu-latest
    needs: dockerize
    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd /chemin/vers/deploiement
            docker-compose down
            docker-compose pull
            docker-compose up -d
