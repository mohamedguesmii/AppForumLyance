name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

jobs:
  build-backend:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: events
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -uroot -proot"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    env:
      SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/events?createDatabaseIfNotExist=true&useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC&zeroDateTimeBehavior=CONVERT_TO_NULL
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: root
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: maven
      - name: Wait for MySQL
        run: |
          for i in {1..30}; do
            mysqladmin ping -h127.0.0.1 -uroot -proot && break
            echo "Waiting for MySQL..."
            sleep 2
          done
      - name: Build Backend with Tests
        run: mvn clean package -Dspring.profiles.active=test
        working-directory: ./EvenementCrud
      - name: Upload backend JAR
        uses: actions/upload-artifact@v4
        with:
          name: backend-jar
          path: EvenementCrud/target/*.jar

  build-frontend:
    runs-on: ubuntu-latest
    needs: build-backend
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ./dashfront/package-lock.json
      - name: Install Angular CLI
        run: npm install -g @angular/cli
      - name: Install Frontend Dependencies
        run: npm ci --legacy-peer-deps
        working-directory: ./dashfront
      - name: Build Frontend
        run: ng build --configuration production
        working-directory: ./dashfront
      - name: Upload frontend dist
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: dashfront/dist/**

  dockerize:
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    steps:
      - uses: actions/checkout@v4

      # Téléchargement des artefacts
      - name: Download backend JAR
        uses: actions/download-artifact@v4
        with:
          name: backend-jar
          path: EvenementCrud/target

      - name: Download frontend dist
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: dashfront/dist

      # Connexion à Docker Hub
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build & Push Backend Docker Image
      - name: Build & Push Backend
        uses: docker/build-push-action@v4
        with:
          context: ./EvenementCrud
          file: ./EvenementCrud/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/backend:latest

      # Build & Push Frontend Docker Image
      - name: Build & Push Frontend
        uses: docker/build-push-action@v4
        with:
          context: ./dashfront
          file: ./dashfront/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/frontend:latest

      # Build & Push AI Docker Image
      - name: Build & Push AI
        uses: docker/build-push-action@v4
        with:
          context: ./cv-matching-serviceAI
          file: ./cv-matching-serviceAI/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/cv-matching-serviceai:latest

      # Build & Push RAG Docker Image
      - name: Build & Push RAG
        uses: docker/build-push-action@v4
        with:
          context: ./RAG
          file: ./RAG/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/rag:latest

      # Build & Push n8n Docker Image
      - name: Build & Push n8n
        uses: docker/build-push-action@v4
        with:
          context: ./n8n
          file: ./n8n/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/n8n:latest

      # Build & Push Scraping Docker Image
      - name: Build & Push Scraping
        uses: docker/build-push-action@v4
        with:
          context: ./scraping
          file: ./scraping/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/scraping:latest

  deploy:
    runs-on: ubuntu-latest
    needs: dockerize
    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd /chemin/vers/deploiement
            docker-compose down
            docker-compose pull
            docker-compose up -d
